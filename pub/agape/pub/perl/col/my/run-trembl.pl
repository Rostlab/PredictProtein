#!/usr/sbin/perl -w
##!/usr/bin/perl
#
# runs script 'tremblPhdTopology.pl
#
$[ =1 ;

if ($#ARGV<1){print"goal:   runs script 'tremblPhdTopology.pl\n";
	      print"usage:  'script list dir=n1-n2'\n";
	      print"        where list= file generated by tremblSplit.pl\n";
	      print"        and n1-n2 are the numbers for directories (in trembl)\n";
	      print"        could also be: n1-*, n1-n2, or: n1,n5,... \n";
	      print"option: single (means run jobs consequtively)\n";
	      print"option: ARCH=x\n";
	      exit;}

$Lsingle=0;			# Lsingle = 0 => starts one job per machine!
$Lall=0;			# run for all files
$par{"script"}="tremblPhdTopology.pl";
foreach $it(2..$#ARGV){
    $_=$ARGV[$it];
    if    (/^single/) { $Lsingle=1;}
    elsif (/^ARCH/)   { $_=~s/^ARCH=|\s//g;$ARCH=$_;}
    elsif (/^dir=/)   { $_=~s/^dir=|\s//g;$par{"dir"}=$_;}
    elsif (/^all/)    { $Lall=1;}
    elsif (/^script=/){ $_=~s/^script=|\s//g;$par{"script"}=$_;}
    else { print "*** wrong command line option '$_'\n";
	   exit;}}
$fileIn=$ARGV[1];
$fhout="FHOUT";

$fhin="FHIN";$#fileRd=0;
&open_file("$fhin", "$fileIn");	# read list of files
while (<$fhin>) {$_=~s/\n//g;
		 if (-e $_){
		     push(@fileRd,$_);}
		 else {
		     print "-*- missing '$_'\n";}}close($fhin);
				# find last file
foreach $file(@fileRd){
    $num=$file;$num=~s/^.*\/(\d+)\/.*$/$1/g;
    $num{"$file"}=$num;}

if    (defined $par{"dir"}){	# get directories to take
    @dir=&get_range($par{"dir"},$num);}
elsif ($Lall){
    @dir=1..$num;}
else{print "*** you have to give 'dir=n1-n2' or use 'all'\n";
     exit;}
				# onto screen
print "--- will read the directories:\n";foreach $dir(@dir){print"$dir,";}print"\n";
				# construct lists
foreach $dir (@dir){
    $Lfound=0;$#tmp=0;
    foreach $file (@fileRd){
	if ($num{"$file"} == $dir){
	    $Lfound=1;
	    push(@tmp,$file);}
	elsif ($Lfound){
	    last;}}
				# write new list
    $list="x"."$dir"."_$$".".list";push(@list,$list);
    &open_file("$fhout", ">$list");
    foreach $tmp(@tmp){
	if (-e $tmp){
	    print $fhout "$tmp\n";}}close($fhout);
}
				# set ARCH
if (! defined $ARCH){$ARCH=$ENV{'ARCH'};}
if (! defined $ARCH){$argARCH="";}else{$argARCH="ARCH=$ARCH";}	# argument
if (! defined $par{"script"}){
    $script="tremblPhdTopology.pl";}else {$script=$par{"script"};}

if ($Lsingle){			# one after the other
    foreach $fileIn(@list){
	$tmp=$fileIn;$tmp=~s/^.*\///g;$tmp=~s/\.list//g;
	$fileTmp="out_"."$tmp".".tmp";
	print "--- running (single)\t '$script $fileIn $argARCH >> $fileTmp'\n";
	system ("$script $fileIn $argARCH >> $fileTmp");
    }}
else {				# parallel
    foreach $fileIn(@list){
	$tmp=$fileIn;$tmp=~s/^.*\///g;$tmp=~s/\.list//g;
	$fileTmp="out_"."$tmp".".tmp";
	print "--- running (multiple)\t '$script $fileIn $argARCH >> $fileTmp &'\n";
	system ("$script $fileIn $argARCH >> $fileTmp &");
    }}

exit;


#==========================================================================================
sub get_range {
    local ($range_txt,$nall) = @_;
    local (@range,@rangeLoc,$it,$range1,$range2);
    $[ =1 ;
#--------------------------------------------------------------------------------
    $#range=0;
    if ($range_txt ne "unk") {
	if ($range_txt =~ /\,/) {
	    @range=split(/,/,$range_txt);}
	elsif ($range_txt =~ /(\d*|\*)-(\d*|\*)/) { 
	    @range=
		&get_rangeHyphen($range_txt,$nall);}
	else {print "*** ERROR in get_range: argument: '$range_txt,$nall' not digestable\n";
	      @range=(0);} }
    else {print "*** ERROR in get_range: argument: '$range_txt,$nall' not digestable\n"; 
	    @range=(0);} 
				# process further elements with hyphens
    $#range2=0;
    foreach $range (@range){
	if ($range =~ /(\d*|\*)-(\d*|\*)/) {
	    @rangeLoc=
		&get_rangeHyphen($range,$nall);
	    push(@range2,@rangeLoc);}
	else {push(@range2,$range);}}
				# sort
    $a=$b=0;
    if ($#range2>1){
	@range=sort {$a<=>$b} @range2;}else{@range=@range2;}
    return (@range);
}				# end of get_range

#==========================================================================================
sub get_rangeHyphen {
    local ($range_txt,$nall) = @_ ;
    local (@rangeLoc,$it,$range1,$range2);
    $[ =1 ;
#--------------------------------------------------------------------------------
#    get_rangeHyphen            reads 'n1-n2'  
#--------------------------------------------------------------------------------
    if ($range_txt =~ /(\d*|\*)-(\d*|\*)/) { 
	($range1,$range2)=split(/-/,$range_txt);
	if ($range1=~/\*/) {$range1=1;}
	if ($range2=~/\*/) {$range2=$nall;} 
	for($it=$range1;$it<=$range2;++$it) {push(@rangeLoc,$it);} }
    else { @rangeLoc=($range_txt);}
    return(@rangeLoc);
}				# end of get_rangeHyphen

#======================================================================
sub open_file {
    local ($file_handle, $file_name, $log_file) = @_ ;
    local ($temp_name) ;

    $temp_name = $file_name ;
    $temp_name =~ s/^>>|^>//g ;
    if ( ($file_name =~ m/^>>/ ) && ( ! -e $temp_name ) ) {
       print "*** \t INFO: file $temp_name does not exist; create it\n" ;
       open ($file_handle, ">$temp_name") || ( do {
             warn "***\t Can't create new file: $temp_name\n" ;
             if ( $log_file ) {
                print $log_file "***\t Can't create new file: $temp_name\n" ;
             }
       } );
       close ("$file_handle") ;
    }
  
    open ($file_handle, "$file_name") || ( do {
             warn "*** \t Can't open file '$file_name'\n" ;
             if ( $log_file ) {
                print $log_file "*** \t Can't create new file '$file_name'\n" ;
             }
             return(0);
       } );
}

