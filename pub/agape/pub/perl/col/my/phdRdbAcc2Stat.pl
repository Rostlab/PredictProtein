#!/usr/sbin/perl -w
#
$scrName=$0;$scrName=~s/^.*\/|\.pl//g;
$scrGoal="statistics on PHD rdb with all seq + acc\n".
    "     \t (note: generated by phd.pl)";
#  
#
$[ =1 ;
				# include libraries
				# ------------------------------
				# defaults
$exposed=  '9,16,25,50';	# if rel Acc > will be considered exposed
$exposed=  '9,16,25';		# if rel Acc > will be considered exposed
$lenMin=   30;			# minimal length of proteins considered
$par{"isPrediction"}=0;		# if no DSSP/HSSP, i.e. no 'real' accessibility known

$Ldebug=   0; 
$Lis_list= 0; 

$fhin="FHIN";$fhout="FHOUT";

				# ------------------------------
if ($#ARGV<1){			# help
    print "goal:\t $scrGoal\n";
    print "use: \t '$scrName file-phd.rdb' (or list thereof called 'x.list')\n";
    print "opt: \t exposed=string  (everything with relAcc > this, treated as exposed)\n";
    print "     \t                 (10,50 -> two intervalls 10 and 50 will be taken)\n";    
    print "     \t len=   $lenMin  (minimal length of protein taken)\n";
    print "     \t lenMax=lenMax   (maximal length of protein taken)\n";
    print "     \t fileOut=x\n";
    print "     \t isPred          (if is prediction, i.e., unknown struc)\n";
    print "     \t dbg             (debug statements)\n";
    print "     \t list            (is list of RDB files)\n";
#    print "     \t \n";
    exit;}

				# ------------------------------
#$tmp=$fileIn;$tmp=~s/^.*\///g;$fileOut="Out-".$tmp;$fileOut=~s/\.list/\.dat/;
$#fileIn=0;

foreach $_(@ARGV){
    if   ($_=~/^fileOut=(.*)$/){$fileOut= $1;}
    elsif(-e $_)               {push(@fileIn,$_);
				$Lis_list=1  if ($_ =~/list$/);}
    elsif($_=~/^exposed=(.*)$/){$exposed= $1;}
    elsif($_=~/^len=(.*)$/)    {$lenMin=  $1;}
    elsif($_=~/^lenMax=(.*)$/) {$lenMax=  $1;}
    elsif($_=~/^de?bu?g$/i)    {$Ldebug=  1;}
    elsif($_=~/^list$/i)       {$Lis_list=1;}
    elsif($_=~/^isPred/)       {$par{"isPrediction"}=1;}
    else {print"*** wrong command line arg '$_'\n";
	  die;}}
@exposed=split(/,/,$exposed);
				# ------------------------------
				# (1) read file with list
if ($Lis_list) {
    $fileIn=$fileIn[1];
    &open_file("$fhin", "$fileIn");
    $#fileIn=0;
    while (<$fhin>) {$_=~s/\n//g;
		     next if (! -e $_);
		     push(@fileIn,$_);}close($fhin);
}
if    ($#fileIn==1 && ! defined $fileOut) {
    $tmp=$fileIn[1];
    $fileOut="Out-".$tmp;$fileOut=~s/\..*$/\.dat/;}
elsif ($Lis_list && ! defined $fileOut){
    $tmp=$fileIn;
    $fileOut="Out-".$tmp;$fileOut=~s/\..*$/\.dat/;}
elsif (! defined $fileOut){
    $fileOut="Out-phdacc.dat";}


$#id=0;				# ------------------------------
foreach $fileIn(@fileIn){	# (2) read all files
				#     ignore if: no accObs, too short, purge after chain break
    print "--- reading '$fileIn'\n" if ($Ldebug);
    &open_file("$fhin", "$fileIn");
    $Lbreak=0;
    $id=$fileIn;$id=~s/^.*\///g;$id=~s/\.rdb.*$//g;
    $ctTmp=$Lboth=0;
    while (<$fhin>) {
	++$ctTmp;
	if ($_=~/^\# LENGTH\s+\:\s*(\d+)/){
	    $len=$1;}
	if ($ctTmp<3){if ($_=~/^\# PHDsec\+PHDacc/){$Lboth=1;}
		      elsif ($_=~/^\# PHDacc/)     {$Lboth=0;}}
	next if ($_=~/^\#|^No|^4N/); # skip comments and first line
	$_=~s/\n//g;
	@tmp=split(/\t/,$_);	# $id,$chain,$len,$nali,$seq,$sec,$acc,$rel
	if ($#tmp<6){
	    print "*** ERROR too few elements in id=$id, line=$_\n";
	    exit;}
	foreach $tmp(@tmp){$tmp=~s/\s//g;} # skip blanks
	$seq=$tmp[2];
	if ($Lboth){
	    if (! $par{"isPrediction"}){
		$rel=$tmp[12];$relObs=$tmp[11];}
	    else{
		$rel=$tmp[9];$relObs=0;}}
	else {
	    if (! $par{"isPrediction"}){
		$rel=$tmp[6];$relObs=$tmp[5];}
	    else{
		$rel=$tmp[6];$relObs=0;}}
	    
	if ($relObs =~/[^0-9]/){
	    print "xx ignore id=$id, file=$fileIn, as no obs acc\n";
	    last;}		# ignore strange cases without obs acc
	
	if (! defined $res{"$id","aveAcc"}){
	    $res{"$id","aveAcc"}=$res{"$id","len"}=0;
	    foreach $exposed(@exposed){
		$res{"$id","numExpPhd","$exposed"}=0;$res{"$id","numExpObs","$exposed"}=0;}}
				# --------------------
	if ($seq eq "!"){	# ignore all after chain break
	    $Lbreak=1;}
	next if ($Lbreak);
	if ($rel =~/[^0-9]/){	# xx hack out, somewhere error
	    next;
	    print "*** error rel=$rel, line=$_,\n";
	    exit;}
	$res{"$id","lenRd"}=$len;
	++$res{"$id","len"};
	$res{"$id","aveAcc"}+=$rel;
	foreach $exposed(@exposed){
	    ++$res{"$id","numExpPhd","$exposed"} if ($rel>=$exposed);
	    ++$res{"$id","numExpObs","$exposed"} if ($relObs>=$exposed);
	}
    }close($fhin);
    push(@id,$id) if ($res{"$id","len"}>$lenMin); # ignore too short after chain break
}				# end of loop over all files

				# ------------------------------
				# (3) write statistics
&open_file("$fhout",">$fileOut"); 
printf $fhout 
    "%-s\t%-s\t%-s\t%-s\t%-s\t%-s\t%-s\t%-s\t%-s\t%-s\t%-s",
    "id","len","lenRd","n16O","n16P","n9O","n9P",
    "cube","sphe","aveCS","ob-pr","pAcc";
foreach $exposed(@exposed){
    next if ($exposed =~/16|^9/); # dont repeat
    printf $fhout "\t%-s","n".$exposed;}
print $fhout "\n";

foreach $id(@id){
    print "xx id=$id, len=",$res{"$id","len"},",\n";
    next if ($res{"$id","len"} < $lenMin);
    next if (defined $lenMax && $res{"$id","len"} > $lenMax);

    $exposed=16;
    $cubes=&funcNsurface($res{"$id","len"});

    printf $fhout 
	"%-s\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%6.2f",
	$id,$res{"$id","len"},$res{"$id","lenRd"},
	$res{"$id","numExpObs","16"},$res{"$id","numExpPhd","16"},
	$res{"$id","numExpObs","9"},$res{"$id","numExpPhd","9"},
	int($cubes),int($cubes*0.797),int($cubes*(1+0.797)/2),
	int($res{"$id","numExpPhd","$exposed"}-($cubes*(1+0.797)/2)),
	($res{"$id","aveAcc"}/$res{"$id","len"});
    foreach $exposed(@exposed){
	next if ($exposed =~/16|^9/); # dont repeat
	printf $fhout 
	    "\t%3d",$res{"$id","numExpPhd","$exposed"};}
    print $fhout "\n";
}
close($fhout);

print "--- output in $fileOut\n";
exit;

#===============================================================================
sub funcNsurface {
    local($lenIn) = @_ ;
    local($tmp);
    $[ =1 ;
#-------------------------------------------------------------------------------
#   funcNsurface                length to number of surface molecules
#                               assuming cubes
#                               out=(N ^ 1/3 - 2) ^ 3
#       in:                     len
#       out:                    nsurface
#-------------------------------------------------------------------------------
#    $tmp=$0;$tmp=~s/^.*\/|\.pl//g;$tmp.=":";
#    $sbrName="$tmp"."funcNsurface";
    return($lenIn - (($lenIn**(1/3)) - 2)**3);
}				# end of funcNsurface


#==============================================================================
# library collected (begin) lll
#==============================================================================


#==============================================================================
sub open_file {
    local ($file_handle,$file_name,$log_file) = @_ ;
    local ($temp_name) ;
#-------------------------------------------------------------------------------
#   open_file                  opens file, writes warning asf
#-------------------------------------------------------------------------------
    $temp_name = $file_name ;
    $temp_name =~ s/^>>|^>//g ;
    if ( ($file_name =~ /^>>/ ) && ( ! -e $temp_name ) ) {
	print "*** INFO (open_file): append file=$temp_name, does not exist-> create it\n" ;
	open ($file_handle, ">$temp_name") || ( do {
	    warn "***\t Cannot create new file: $temp_name\n" ;
	    if ( $log_file ) {
		print $log_file "***\t Cannot create new file: $temp_name\n" ;}
	    return (0);
	} );
	close ("$file_handle") ;}
  
    open ($file_handle, "$file_name") || ( do {
	warn "*** ERROR lib-br:open_file: Cannot open file '$file_name'\n" ;
	if ( $log_file ) {
	    print $log_file "*** lib-br:open_file: Cannot create new file '$file_name'\n" ;}
	return(0);
    } );
    return(1);
}				# end of open_file



#==============================================================================
# library collected (end)   lll
#==============================================================================

