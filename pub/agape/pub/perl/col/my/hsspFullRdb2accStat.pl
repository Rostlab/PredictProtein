#!/usr/sbin/perl -w
#
$scrName=$0;$scrName=~s/^.*\/|\.pl//g;
$scrGoal="statistics on HSSP rdb with all seq, sec, acc\n".
    "     \t (note: generated by hsspExtrSSA2rdb.pl)";
#  
#
$[ =1 ;
				# include libraries
push (@INC, "/home/rost/perl") ;if (! defined $ENV{'PERLLIB'}){push(@INC,$ENV{'PERLLIB'});}
require "ctime.pl";
require "lib-ut.pl"; require "lib-prot.pl"; require "lib-comp.pl";
				# ------------------------------
				# defaults
$exposed=  '9,16,25,50';	# if rel Acc > will be considered exposed
$exposed=  '9,16,25';		# if rel Acc > will be considered exposed
$lenMin=   30;			# minimal length of proteins considered

$fhin="FHIN";$fhout="FHOUT";

				# ------------------------------
if ($#ARGV<1){			# help
    print "goal:\t $scrGoal\n";
    print "use: \t '$scrName file'\n";
    print "opt: \t exposed=string  (everything with relAcc > this, treated as exposed)\n";
    print "     \t                 (10,50 -> two intervalls 10 and 50 will be taken)\n";    
    print "     \t len=$lenMin  (minimal length of protein taken)\n";
    print "     \t fileOut=x\n";
#    print "     \t \n";
    exit;}

				# ------------------------------
$fileIn=$ARGV[1];		# read command line
$tmp=$fileIn;$tmp=~s/^.*\///g;$fileOut="Out-".$tmp;

foreach $_(@ARGV){
    next if ($_ eq $ARGV[1]);
    if   ($_=~/^fileOut=(.*)$/){$fileOut=$1;}
    elsif($_=~/^exposed=(.*)$/){$exposed=$1;}
    elsif($_=~/^len=(.*)$/)    {$lenMin=$1;}
    else {print"*** wrong command line arg '$_'\n";
	  die;}}
die 'missing hsspRdb'.$fileIn  if (! -e $fileIn);
@exposed=split(/,/,$exposed);
				# ------------------------------
				# (1) read file
&open_file("$fhin", "$fileIn");
$idBef="";$#id=0;
while (<$fhin>) {
    next if ($_=~/^\#|^id/);	# skip comments and first line
    $_=~s/\n//g;
    @tmp=split(/\t/,$_);	# $id,$chain,$len,$nali,$seq,$sec,$acc,$rel
    if ($#tmp<8){
	print "*** ERROR too few elements in id=$id, line=$_\n";
	exit;}
    foreach $tmp(@tmp){$tmp=~s/\s//g;} # skip blanks
    $id=$tmp[1];$len=$tmp[3];$rel=$tmp[8];$chain=$tmp[2];$chain=~s/\s//g;
    $id.="$chain" if ($chain =~ /[0-9A-Z]/);
#    print "xx chain=$chain, id=$id,\n";exit;
				# --------------------
    if ($id ne $idBef){		# start new counts
	print "xx start new count on id=$id (bef=$idBef)\n";
	$idBef=$id;  push(@id,$id);  $Lbreak=0;
	$res{"$id","aveAcc"}=$res{"$id","len"}=0;
	foreach $exposed(@exposed){$res{"$id","numExp","$exposed"}=0;}}
				# --------------------
    if ($tmp[5] eq "!"){	# ignore all after chain break
	$Lbreak=1;}
    next if ($Lbreak);

    $res{"$id","lenRd"}=$len;
    ++$res{"$id","len"};
    $res{"$id","aveAcc"}+=$rel;
    foreach $exposed(@exposed){
	++$res{"$id","numExp","$exposed"} if ($rel>=$exposed);}
}close($fhin);

				# ------------------------------
				# (2) write statistics
&open_file("$fhout",">$fileOut"); 
printf $fhout 
    "%-s\t%-s\t%-s\t%-s\t%-s\t%-s\t%-s","id","len","n16","cube","sphe","aveCS","ob-pr","pAcc";
foreach $exposed(@exposed){
    printf $fhout "\t%-s\t%-s","n".$exposed,"p".$exposed;}
print $fhout "\n";

foreach $id(@id){
    print "xx id=$id, len=",$res{"$id","len"},",\n";
    next if ($res{"$id","len"} < $lenMin);

    $exposed=16;
    $cubes=&funcNsurface($res{"$id","len"});

    printf $fhout 
	"%-s\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%6.2f",
	$id,$res{"$id","len"},$res{"$id","numExp","16"},
	int($cubes),int($cubes*0.797),int($cubes*(1+0.797)/2),
	int($res{"$id","numExp","16"}-($cubes*(1+0.797)/2)),
	($res{"$id","aveAcc"}/$res{"$id","len"});
    foreach $exposed(@exposed){
	printf $fhout 
	    "\t%3d\t%3d",$res{"$id","numExp","$exposed"},
	    int(100*($res{"$id","numExp","$exposed"}/$res{"$id","len"}));}
    print $fhout "\n";
}
close($fhout);

print "--- output in $fileOut\n";
exit;

#===============================================================================
sub funcNsurface {
    local($lenIn) = @_ ;
    local($tmp);
    $[ =1 ;
#-------------------------------------------------------------------------------
#   funcNsurface                length to number of surface molecules
#                               assuming cubes
#                               out=(N ^ 1/3 - 2) ^ 3
#       in:                     len
#       out:                    nsurface
#-------------------------------------------------------------------------------
#    $tmp=$0;$tmp=~s/^.*\/|\.pl//g;$tmp.=":";
#    $sbrName="$tmp"."funcNsurface";
    return($lenIn - (($lenIn**(1/3)) - 2)**3);
}				# end of funcNsurface

