#!/usr/sbin/perl -w
#
$scrName=$0;$scrName=~s/^.*\/|\.pl//g;
$scrGoal="reads list of HSSP files and writes HTML table\n";
#  
#
$[ =1 ;
				# include libraries
push (@INC, "/home/rost/perl") ;if (! defined $ENV{'PERLLIB'}){push(@INC,$ENV{'PERLLIB'});}
# require "ctime.pl"; 
require "lib-ut.pl"; require "lib-br.pl";
# require "lib-ut.pl"; require "lib-prot.pl"; require "lib-comp.pl";
				# ------------------------------
				# defaults
$par{"organism"}=      "yeast";	# used for title of WWW page
$par{"nperLine"}=      50;	# number of residues per line (HTML sequence)

				# ------------------------------
if ($#ARGV<1){			# help
    print "goal:\t $scrGoal\n";
    print "use: \t '$scrName file-list'\n";
    print "opt: \t title=x      (output x.rdb x.html)\n";
    print "     \t fileOutRdb=x\n";
    print "     \t fileOutHtml=x\n";
    print "     \t noNali       (dont write NALI column)\n";
    print "     \t noSeq        (dont write Sequence column)\n";
    print "     \t nperLine=",   $par{"nperLine"},   "      (default for WWW file seq)\n";
    print "     \t organism=",   $par{"organism"},   "      (default for WWW file title)\n";
#    print "     \t \n";
    exit;}
				# initialise variables
$fhin="FHIN";$fhout="FHOUT";
				# ------------------------------
				# read command line
$fileIn=$ARGV[1];
foreach $_(@ARGV){
    next if ($_ eq $ARGV[1]);
    if   ($_=~/^fileOutRdb=(.*)$/) {$fileOutRdb=$1;}
    elsif($_=~/^fileOutHtml=(.*)$/){$fileOutHtml=$1;}
    elsif($_=~/^title=(.*)$/)      {$title=$1;}
    elsif($_=~/^noNali/)           {$LnoNali=1;}
    elsif($_=~/^noSeq/)            {$LnoSeq=1;}
    elsif($_=~/^organism=(.*)$/)   {$par{"organism"}=$1;}
    elsif($_=~/^nperline=(.*)$/)   {$par{"nperline"}=$1;}
#    elsif($_=~/^=(.*)$/)    {$=$1;}
    else {print"*** wrong command line arg '$_'\n";
	  die;}}

die ("missing input $fileIn\n") if (! -e $fileIn);

$LnoNali=    0              if (! defined $LnoNali);
$LnoSeq=     0              if (! defined $LnoSeq);
$tmp=$fileIn;$tmp=~s/^.*\/|\..*$//g;
$title=      $tmp           if (! defined $title);
$fileOutRdb= $title.".rdb"  if (! defined $fileOutRdb);
$fileOutHtml=$title.".html" if (! defined $fileOutHtml);
$par{"organism"}=$title     if (! defined $par{"organism"});
				# ------------------------------
$#id=$#len=$#nali=$#seq=0;	# (1) read file list
&open_file("$fhin", "$fileIn");
while (<$fhin>) {
    $_=~s/\n//g;
    next if (! -e $_);
    print "--- read $_\n"; $fileHssp=$_;
				# get NALIGN
    if (! $LnoNali){undef %rd; 
		    ($Lok,%rd)=&hsspRdHeader($fileHssp,"NALIGN","SEQLENGTH");
		    $nali=$rd{"NALIGN"};$len=$rd{"SEQLENGTH"};}
				# get sequence
    if (! $LnoSeq) {undef %rd; 
		    ($Lok,%rd)=&hsspRdSeqSecAcc($fileHssp,"*","*");
		    if (! $LnoSeq) {$seq="";
				    foreach $it (1..$rd{"NROWS"}){$seq.=$rd{"seq","$it"};}}}
				# get id
    $id=$fileHssp;$id=~s/^.*\///g;
    if ($id =~/\.hssp.*_([A-Z0-9])/){$chain=$1;}else{$chain=0;}
    $id=~s/\.hssp.*$//g;
    $id.=$chain if ($chain);
    push(@id,$id); push(@len,$len);
    push(@nali,$nali) if (! $LnoNali);
    push(@seq, $seq)  if (! $LnoSeq);}close($fhin);

				# ------------------------------
				# (2) write RDB
&open_file("$fhout",">$fileOutRdb"); 
print $fhout 
    "# Perl-RDB\n","# generated by $scrName ($fileIn)\n";
				# header
printf $fhout "# NOTATION %-5s : %-s\n","id",   "identifier of protein";
printf $fhout "# NOTATION %-5s : %-s\n","nali", "number of sequence in family";
printf $fhout "# NOTATION %-5s : %-s\n","len",  "length of protein";
printf $fhout "# NOTATION %-5s : %-s\n","seq",  "sequence (one letter amino acid code)";
				# names
print $fhout "id","\t","len";
print $fhout "\tnali"       if (! $LnoNali);
print $fhout "\tseq"        if (! $LnoSeq);
print $fhout "\n";
				# body
foreach $it (1..$#id){
    print $fhout $id[$it],"\t",$len[$it];
    print $fhout "\t",$nali[$it]   if (! $LnoNali);
    print $fhout "\t",$seq[$it]    if (! $LnoSeq);
    print $fhout "\n";}
close($fhout);
				# ------------------------------
				# (3) write output (HTML)
$Llink=1;
&rdb2htmlHere($fileOutRdb,$fileOutHtml,$fhout,$Llink);

print "--- output in $fileOutRdb,$fileOutHtml\n";

exit;

#==========================================================================================
sub rdb2htmlHere {
    local ($fileRdb,$fileHtml,$fhout,$Llink) = @_ ;
    local (@headerRd,$tmp,@tmp,@colNames,$colNames,%body,$des,$ct,$fhin);
    $[ =1 ;
#--------------------------------------------------------------------------------
#    sub: rdb2html              convert an RDB file to HTML
#         input:		$fileRdb,$fileHtml,$fhout,$Llink 
#                               (Llink=1 -> links from column names to Notation in header)
#--------------------------------------------------------------------------------
    $fhin="FHinRdb2html";
    &open_file("$fhin", "$fileRdb"); # external lib-ut.pl
    
    $#headerRd=0;		# ------------------------------
    while (<$fhin>) {		# read header of RDB file
	$tmp=$_;$_=~s/\n//g;
	last if (! /^\#/);
	push(@headerRd,$_);}
				# ------------------------------
				# get column names
    $tmp=~s/\n//g;$tmp=~s/^\t*|\t*$//g;
    @colNames=split(/\t/,$tmp);

    $body{"COLNAMES"}="";	# store column names
    foreach $des (@colNames){$body{"COLNAMES"}.="$des".",";}
	
    $ct=0;			# ------------------------------
    while (<$fhin>) {		# read body
	next if ($_=~/\t\d+[NFD\t]\t/); # skip format
	$_=~s/\n//g;$_=~s/^\t*|\t*$//g;	# purge leading
	next if (length($_)<1);
	@tmp=split(/\t/,$_);
	++$ct;
	foreach $it (1..$#tmp){	# store body
	    $key=$colNames[$it];
	    $body{"$ct","$key"}=$tmp[$it];}}
    $body{"NROWS"}=$ct;
				# end of reading RDB file
				# ------------------------------

				# ------------------------------
				# write output file
    &open_file("$fhout", ">$fileHtml") if ($fhout ne "STDOUT");
    @tmp=			# write header   external lib-ut.pl
	&wrtRdb2HtmlHeaderHere($fhout,$Llink,$body{"COLNAMES"},@headerRd);
				# mark keys to be linked
    foreach $col (@colNames){$body{"link","$col"}=0;}
    foreach $col (@tmp)     {$body{"link","$col"}=1;}
	
				# write body
    &wrtRdb2HtmlBodyHere($fhout,$Llink,%body);

    close($fhin);close($fhout) if ($fhout ne "STDOUT");
}				# end of rdb2htmlHere

#==========================================================================================
sub wrtRdb2HtmlHeaderHere {
    local ($fhout,$LlinkLoc,$colNamesLoc,@headerLoc) = @_ ;
    local (@colNamesLoc,$Lnotation,$LlinkHere,$col,@namesLink);
    $[ =1 ;
#--------------------------------------------------------------------------------
#   wrtRdb2HtmlHeader		write the HTML header
#         input:		$fhout,$fileLoc,$LlinkLoc,$colNamesLoc,@headerLoc
#                               where colName="name1,name2,"
#                               and @headerLoc contains all lines in header
#         output:               @nameLinks : names of columns with links (i.e.
#                               found as NOTATION in header line
#--------------------------------------------------------------------------------
    $#namesLink=0;

    $colNamesLoc=~s/^,*|,*$//g;
    @colNamesLoc=split(/,/,$colNamesLoc);

    print $fhout 
	"<HTML>\n",
	"<TITLE>Database search results for ",$par{"organism"},"</TITLE>\n",
	"<BODY>\n",
	"<CENTER>\n",
	"<H1>Database search results for ",$par{"organism"},"</H1>\n",
	"<H2>Burkhard Rost</H2>\n",
	"<P><P>\n",
	"</CENTER>\n",
	"\n",
	"<P><P>\n",
	"<FONT SIZE=2> 69 012 Heidelberg, Germany, ",
	"<A HREF=\"mailto:rost\@EMBL-Heidelberg.de\">rost\@embl-heidelberg.de</A>, ",
	"<A HREF=\"http://www.embl-heidelberg.de/~rost/\">http://www.embl-heidelberg.de/~rost/</A>",
	"<BR> </FONT>\n",
	"\n",
	"<P><P>\n",
	"\n",
	"<UL>\n",
	"<LI><A HREF=\"\#HEADER\">Header (descriptions of column names)</A>",
	"<LI><A HREF=\"\#BODY\">  Table<A>",
	"</UL>\n",
	"<P><P>\n",
	"\n",
	"\n",
	"<HR>\n",
	"<P><P>\n",
	"<A NAME=\"HEADER\"><H2>Header (description of column names)</H2></A>\n",
	"<P><P>\n";

    print $fhout "<PRE>\n";
    $Lnotation=0;undef %ok;
    foreach $_(@headerLoc){
	$LlinkHere=0;$Lnotation=1 if ($_=~/NOTATION/);
	$_=~s/^\s*\#\s*//g;
	if ($Lnotation){
	   foreach $col(@colNamesLoc){
	       $LlinkHere=0;
		if ($_=~/NOTATION\s*$col[\s\:]+/){ 
		    $colFound=$col;$LlinkHere=1;
		    if (! defined $ok{$col}){$ok{$col}=1;
					     push(@namesLink,$col);}
		    last;}}
	   if ($LlinkLoc && $LlinkHere){ 
		print $fhout "<A NAME=\"$colFound\">";}}
	print $fhout "$_";
	if ($LlinkHere){
	   print $fhout "</A>";}
	print $fhout "\n";}
    print $fhout "\n</PRE>\n";
    print $fhout "<BR>\n";
    return(@namesLink);
}				# end of wrtRdb2HtmlHeaderHere

#==========================================================================================
sub wrtRdb2HtmlBodyHere {
    local ($fhout,$LlinkLoc,%bodyLoc) = @_ ;
    $[ =1 ;
#--------------------------------------------------------------------------------
#   wrtRdb2HtmlBodyHere		writes the body for a RDB->HTML file
#                               where $body{"it","colName"} contains the columns
#--------------------------------------------------------------------------------
    print $fhout 
	"<P><P><HR><P><P>\n\n",
	"<A NAME=\"BODY\"><H2>Table</H2><\/A>\n",
	"<P><P>\n";
				# get column names
    $bodyLoc{"COLNAMES"}=~s/^,*|,*$//g;
    @colNames=split(/,/,$bodyLoc{"COLNAMES"});

    print $fhout "<TABLE BORDER>\n";
				# ------------------------------
    				# write column names with links
    &wrtRdb2HtmlBodyColNamesHere($fhout,@colNames);

				# ------------------------------
				# write body
    foreach $it (1..$body{"NROWS"}){
	print $fhout "\n<TR>   ";
	foreach $itdes (1..$#colNames){
	    if    ($colNames[$itdes]=~/^(num|nali|len)/){
		print $fhout "<TD ALIGN=RIGHT>";}
	    elsif ($colNames[$itdes]=~/^(id|seq)/){
		print $fhout "<TD ALIGN=LEFT>";}
	    else {print $fhout "<TD>";}
	    
	    if (defined $body{"$it","$colNames[$itdes]"} && $colNames[$itdes] eq "seq") {
		$seq=$body{"$it","$colNames[$itdes]"};
		if ($par{"nperLine"}>=length($seq)){
		    print $fhout $seq;}
		else{
		    $seqTmp="";
		    for ($res=1;$res<=(length($seq)-$par{"nperLine"});$res+=$par{"nperLine"}){
			$len=$par{"nperLine"}; 
			$len=(length($seq)-$res) if ((length($seq)-$res)<$par{"nperLine"});
#			$seqTmp.=substr($seq,$res,$len)." ";
			$seqTmp.=substr($seq,$res,$len)."<BR>";
		    }
		    print $fhout $seqTmp;}}
	    elsif (defined $body{"$it","$colNames[$itdes]"}){
	    	print $fhout $body{"$it","$colNames[$itdes]"};}
	    else {print $fhout " ";} 
	    print $fhout "</TD>";}
	print $fhout "</TR>\n";
				# ------------------------------
				# repeat names
	if (int($it/50)==($it/50)){
	    &wrtRdb2HtmlBodyColNamesHere($fhout,@colNames);}

    }

    print $fhout "\n";
    print $fhout "</TABLE>\n";
    print $fhout "\n\n";
				# ------------------------------
				# final words
    print $fhout
	"<P><P><BR><BR><P><P>\n"."<HR>\n"."<!--"."=" x 50 ."-->\n\n",
	"<A HREF=\"http://www.embl-heidelberg.de/\"> ",
	"<IMG WIDTH=50 HEIGHT=50 ALIGN=MIDDLE SRC=\"../Dfig/icon-embl.gif\" ALT=\"EMBL Home\"></A> \n",
	"<A HREF=\"../index.html\">",
	"<IMG WIDTH=50 HEIGHT=50 ALIGN=MIDDLE SRC=\"../Dfig/icon-br-home.gif\" ALT=\"Rost Home\"></A>\n",
	"<A HREF=\"mailto:rost\@EMBL-Heidelberg.de\">",
	"<IMG WIDTH=50 HEIGHT=50 ALIGN=MIDDLE SRC=\"../Dfig/icon-br-home-mail.gif\" ALT=\"Mail to Rost\"></A>\n\n",
	"<A HREF=\"http://www.embl-heidelberg.de/predictprotein/predictprotein.html\">",
	"<IMG ALIGN=MIDDLE WIDTH=50 HEIGHT=50 SRC=\"../Dfig/icon-pp.gif\" ALT=\"PredictProtein\"></A>\n",
	"<A HREF=\"http://www.embl-heidelberg.de/~rost/aqua.html\">",
	"<IMG ALIGN=MIDDLE WIDTH=50 HEIGHT=50 SRC=\"../Dfig/icon-aqua.gif\" ALT=\"Aqua Home\"></A>\n\n",
	"</BODY>\n","</HTML>\n";
	

}				# end of wrtRdb2HtmlBodyHere

#==========================================================================================
sub wrtRdb2HtmlBodyColNamesHere {
    local ($fhout,@colNames)=@_;
    $[ =1 ;
#--------------------------------------------------------------------------------
#   WrtRdb2HtmlBodyColNames   writes the column names (called by previous)
#       GLOBAL input:		%bodyLoc
#         input:                $fhout,@colNames
#--------------------------------------------------------------------------------
    print $fhout "<TR ALIGN=LEFT>  ";
    foreach $des (@colNames){
	print $fhout "\t<TH>";
	if ($LlinkLoc && $bodyLoc{"link","$des"}){
	    print $fhout "<A HREF=\"\#$des\">";}
	print $fhout $des," ";
	if ($LlinkLoc && $bodyLoc{"link","$des"}){
	    print $fhout "</A>";}
	print $fhout "</TH>\n";
    }
    print $fhout "</TR>\n";
}				# end of wrtRdb2HtmlBodyColNamesHere

