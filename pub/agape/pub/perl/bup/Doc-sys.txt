# 
# -----------------------------------------------------------------------------# 
#                               ---------------------
#   sys                         internal subroutines:
#                               ---------------------
# 
#   complete_dir                
#   completeDir                 
#   cp_file                     
#   dirLsAll                    will return all directories in dirLoc (and
#   dirMk                       1
#   file_cp                     
#   file_mv                     
#   file_rm                     
#   fileCp                      1
#   fileGetNewest               finds latest file in list (array from: fileLsAll*Long)
#   fileLsAll                   will return a list of all files in dirLoc (and
#   fileLsAllLong               will return 'ls -l' of all text files in dirLoc
#   fileLsAllTxt                will return all text files in dirLoc (and
#   fileLsLong2date             converts output from 'ls -l' to date
#   fileLsAllTxtLong            will return 'ls -l' of all text files in dirLoc
#   fileMv                      
#   fileRm                      
#   hsspGrepLen                 greps the 'SEQLENGTH  ddd' line from HSSP files
#   hsspGrepNali                greps the 'NALIGN  ddd' line from HSSP files
#   hsspGrepPdbid               greps all PDB ids from HSSP files
#   identify_current_user       
#   lsAllDir                    
#   lsAllFiles                  
#   lsAllTxtFiles               
#   pdbGrepResolution           greps the 'RESOLUTION' line from PDB files
#   run_program                 1
#   runSys                      1
#   sysCatfile                  system call 'cat < file1 >> file2'
#   sysCpfile                   system call '\\cp file1 file2' (or to dir)
#   sysDate                     returns $Date
#   sysGetUser                  returns $USER (i.e. user name)
#   sysMkdir                    system call 'mkdir'
#   sysMvfile                   system call '\\mv file'
#   sysRmdir                    removes directory
#   sysRunProg                  pipes arguments into $prog, and cats the output
#   sysSendMailAlarm            sends alarm mail to user
#   tarRemovePath               removes a dead path from tar file
# 
# -----------------------------------------------------------------------------# 
#                               ---------------------
#   sys                         external subroutines:
#                               ---------------------
# 
#   call from scr:              errSbr,month2num
# 
#   call from sys:              fileLsAll,fileLsAllTxt,fileLsLong2date,sysCpfile,sysMvfile
#                               sysRmdir
# 
#   call from system:            
#                               echo '$messageLoc' | $exe_mailLoc -s PP_ERROR $userLocecho '$messageLoc' | $exe_mailLoc -s PP_ERROR $userLoc
# 
#   call from missing:           
#                               ctime
#                               localtime
# 
# 
# -----------------------------------------------------------------------------# 
#                               ---------------------------
#   sys                         description of subroutines:
#                               ---------------------------
#   --------------------------   
#   complete_dir                
#   --------------------------   
#   completeDir                 
#   --------------------------   
#   cp_file                     
#   --------------------------   
#   dirLsAll                    will return all directories in dirLoc (and
#                               subdirectories therof)
#       in:                     dirLoc (directory)
#       out:                    @files
#                               subdirectories therof)
#       in:                     dirLoc (directory)
#       out:                    @files
#   --------------------------   
#   dirMk                       1
#   --------------------------   
#   file_cp                     
#   --------------------------   
#   file_mv                     
#   --------------------------   
#   file_rm                     
#   --------------------------   
#   fileCp                      1
#   --------------------------   
#   fileGetNewest               finds latest file in list (array from: fileLsAll*Long)
#       in:                     $date,$opt,@list
#         $date=                Feb-3-1998
#         $opt=                 [one|all] -> returns dates for one, or many!
#         @list=                array from: fileLsAll*Long
#                               '-rwxr-xr-x  1 rost         1368 Jan 12 06:44 file'
#       out:                    $date,$file,@dates (of all others) (date=13-2-1998)
#       in:                     $date,$opt,@list
#         $date=                Feb-3-1998
#         $opt=                 [one|all] -> returns dates for one, or many!
#         @list=                array from: fileLsAll*Long
#                               '-rwxr-xr-x  1 rost         1368 Jan 12 06:44 file'
#       out:                    $date,$file,@dates (of all others) (date=13-2-1998)
#   --------------------------   
#   fileLsAll                   will return a list of all files in dirLoc (and
#                               subdirectories therof)
#       in:                     dirLoc (directory)
#       out:                    @files
#                               subdirectories therof)
#       in:                     dirLoc (directory)
#       out:                    @files
#   --------------------------   
#   fileLsAllLong               will return 'ls -l' of all text files in dirLoc
#                               (and subdirectories therof)
#                               shitty SGI dont know 'find -ls' so hack...
#       in:                     dirLoc (directory)
#       out:                    @files
#                               (and subdirectories therof)
#                               shitty SGI dont know 'find -ls' so hack...
#       in:                     dirLoc (directory)
#       out:                    @files
#   --------------------------   
#   fileLsAllTxt                will return all text files in dirLoc (and
#                               subdirectories therof)
#       in:                     dirLoc (directory)
#       out:                    @files
#                               subdirectories therof)
#       in:                     dirLoc (directory)
#       out:                    @files
#   --------------------------   
#   fileLsLong2date             converts output from 'ls -l' to date
#       in:                     $dateIn,$lineIn
#         $date=                Feb-3-1998
#         $line (SUN)=          '-rwxr-xr-x  1 rost         1368 Jan 12 06:44 file'
#         $line (other)=        '-rwxr-xr-x  1 rost  group       1368 Jan 12 06:44 file'
#       out:                    $date,$day,$month,$year (date=13-2-1998)
#       in:                     $dateIn,$lineIn
#         $date=                Feb-3-1998
#         $line (SUN)=          '-rwxr-xr-x  1 rost         1368 Jan 12 06:44 file'
#         $line (other)=        '-rwxr-xr-x  1 rost  group       1368 Jan 12 06:44 file'
#       out:                    $date,$day,$month,$year (date=13-2-1998)
#   --------------------------   
#   fileLsAllTxtLong            will return 'ls -l' of all text files in dirLoc
#                               (and subdirectories therof)
#                               shitty SGI dont know 'find -ls' so hack...
#       in:                     dirLoc (directory)
#       out:                    @files
#                               (and subdirectories therof)
#                               shitty SGI dont know 'find -ls' so hack...
#       in:                     dirLoc (directory)
#       out:                    @files
#   --------------------------   
#   fileMv                      
#   --------------------------   
#   fileRm                      
#   --------------------------   
#   hsspGrepLen                 greps the 'SEQLENGTH  ddd' line from HSSP files
#       in:                     $fileInLoc=  file
#       in:                     $exclLoc=    limit for LEN  (0 to avoid checkin)
#       in:                     $modeLoc=    mode of to exclude 'gt|ge|lt|le'  (0 to avoid checkin)
#       out:                    1|0,msg,$len (0 if condition not fulfilled)
#       err:                    (1,'ok'), (0,'message')
#       in:                     $fileInLoc=  file
#       in:                     $exclLoc=    limit for LEN  (0 to avoid checkin)
#       in:                     $modeLoc=    mode of to exclude 'gt|ge|lt|le'  (0 to avoid checkin)
#       out:                    1|0,msg,$len (0 if condition not fulfilled)
#       err:                    (1,'ok'), (0,'message')
#   --------------------------   
#   hsspGrepNali                greps the 'NALIGN  ddd' line from HSSP files
#       in:                     $fileInLoc=  file
#       in:                     $exclLoc=    limit for NALI (0 to avoid checkin)
#       in:                     $modeLoc=    mode of to exclude 'gt|ge|lt|le'  (0 to avoid checkin)
#       out:                    1|0,msg,$nali (0 if condition not fulfilled)
#       err:                    (1,'ok'), (0,'message')
#       in:                     $fileInLoc=  file
#       in:                     $exclLoc=    limit for NALI (0 to avoid checkin)
#       in:                     $modeLoc=    mode of to exclude 'gt|ge|lt|le'  (0 to avoid checkin)
#       out:                    1|0,msg,$nali (0 if condition not fulfilled)
#       err:                    (1,'ok'), (0,'message')
#   --------------------------   
#   hsspGrepPdbid               greps all PDB ids from HSSP files
#       in:                     $fileInLoc=  file
#       out:                    1|0,msg,$list (id1,id2,)
#       err:                    (1,'ok'), (0,'message')
#       in:                     $fileInLoc=  file
#       out:                    1|0,msg,$list (id1,id2,)
#       err:                    (1,'ok'), (0,'message')
#   --------------------------   
#   identify_current_user       
#   --------------------------   
#   lsAllDir                    
#   --------------------------   
#   lsAllFiles                  
#   --------------------------   
#   lsAllTxtFiles               
#   --------------------------   
#   pdbGrepResolution           greps the 'RESOLUTION' line from PDB files
#       in:                     $fileInLoc=  file
#       in:                     $exclLoc=    limit for RESOLUTION  (0 to avoid checkin)
#       in:                     $modeLoc=    mode of to exclude 'gt|ge|lt|le'  (0 to avoid checkin)
#       in:                     $resMaxLoc=  resolution assigned if none found
#       out:                    1|0,msg,$res (0 if condition not fulfilled)
#       err:                    (1,'ok'), (0,'message')
#       in:                     $fileInLoc=  file
#       in:                     $exclLoc=    limit for RESOLUTION  (0 to avoid checkin)
#       in:                     $modeLoc=    mode of to exclude 'gt|ge|lt|le'  (0 to avoid checkin)
#       in:                     $resMaxLoc=  resolution assigned if none found
#       out:                    1|0,msg,$res (0 if condition not fulfilled)
#       err:                    (1,'ok'), (0,'message')
#   --------------------------   
#   run_program                 1
#   --------------------------   
#   runSys                      1
#   --------------------------   
#   sysCatfile                  system call 'cat < file1 >> file2'
#       in:                     $niceLoc,$fileToCatTo,@fileToCat
#                               if not nice pass niceLoc=no (or nonice)
#       out:                    ok=(1,'cat a b') , else=(0,msg)
#       in:                     $niceLoc,$fileToCatTo,@fileToCat
#                               if not nice pass niceLoc=no (or nonice)
#       out:                    ok=(1,'cat a b') , else=(0,msg)
#   --------------------------   
#   sysCpfile                   system call '\\cp file1 file2' (or to dir)
#       in:                     file1,file2 (or dir), nice value (nice -19)
#       out:                    ok=(1,'cp a b') , else=(0,msg)
#       in:                     file1,file2 (or dir), nice value (nice -19)
#       out:                    ok=(1,'cp a b') , else=(0,msg)
#   --------------------------   
#   sysDate                     returns $Date
#       out:                    $Date (May 30, 1998 59:39:03)
#       out:                    $Date (May 30, 1998 59:39:03)
#   --------------------------   
#   sysGetUser                  returns $USER (i.e. user name)
#       out:                    USER
#       out:                    USER
#   --------------------------   
#   sysMkdir                    system call 'mkdir'
#                               note: system call returns 0 if ok
#       in:                     directory, nice value (nice -19)
#       out:                    ok=(1,'mkdir a') , else=(0,msg)
#                               note: system call returns 0 if ok
#       in:                     directory, nice value (nice -19)
#       out:                    ok=(1,'mkdir a') , else=(0,msg)
#   --------------------------   
#   sysMvfile                   system call '\\mv file'
#       in:                     $fileToCopy,$fileToCopyTo (or dir),$niceLoc
#       out:                    ok=(1,'mv a b') , else=(0,msg)
#       in:                     $fileToCopy,$fileToCopyTo (or dir),$niceLoc
#       out:                    ok=(1,'mv a b') , else=(0,msg)
#   --------------------------   
#   sysRmdir                    removes directory
#       in:                     dir,[1|0] for daring '\\rm -r '!!
#       out:                    0|1
#       in:                     dir,[1|0] for daring '\\rm -r '!!
#       out:                    0|1
#   --------------------------   
#   sysRunProg                  pipes arguments into $prog, and cats the output
#                               from $prog into a file
#       in:                     $cmd,$fileScrLoc,$fhError
#       in:                     $cmd='prog,arg1,arg2' 
#       in:                          where prog is the program, e.g. 'wc -l, file1,file2'
#       in:                     $fileScrLoc     is the output file
#       in:                        NOTE: if not defined: buffered to STDOUT
#       in:                      = 0            to surpress writing
#       in:                     $fhError        filehandle for ERROR writing
#                                  NOTE: to STDOUT if not defined
#       in:                      = 0            to surpress writing
#       out:                    0|1,message
#       err:                    ok -> 1,ok | err -> 0,message
#                               from $prog into a file
#       in:                     $cmd,$fileScrLoc,$fhError
#       in:                     $cmd='prog,arg1,arg2' 
#       in:                          where prog is the program, e.g. 'wc -l, file1,file2'
#       in:                     $fileScrLoc     is the output file
#       in:                        NOTE: if not defined: buffered to STDOUT
#       in:                      = 0            to surpress writing
#       in:                     $fhError        filehandle for ERROR writing
#                                  NOTE: to STDOUT if not defined
#       in:                      = 0            to surpress writing
#       out:                    0|1,message
#       err:                    ok -> 1,ok | err -> 0,message
#   --------------------------   
#   sysSendMailAlarm            sends alarm mail to user
#       in:                     $message, $user, $exe_mail
#       err:                    ok=(1,'ok'), err=(0,'msg')
#       in:                     $message, $user, $exe_mail
#       err:                    ok=(1,'ok'), err=(0,'msg')
#   --------------------------   
#   tarRemovePath               removes a dead path from tar file
#       in:                     $fileTarLoc,$cmdTarLoc,$cmdUntarLoc
#       out:                    will overwrite!
#       in:                     $fileTarLoc,$cmdTarLoc,$cmdUntarLoc
#       out:                    will overwrite!
