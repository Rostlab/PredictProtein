#!/usr/bin/perl -w

use strict;
use Data::Dumper;
use Carp qw(cluck croak confess longmess);
use Getopt::Long;
use File::Copy;
use File::Temp;
use File::Basename;
use Pod::Usage;
use Config::IniFiles;
use Bio::Seq;
use Bio::SeqIO;


$Carp::Verbose = 1; 

my $warn = "---";
my $err = "***";

# SYSTEM CONFIGURATION RETRIEVAL
our $config;
my ($pp_rootdir,$librg_utils_perl, $librg_dudek_perl);
BEGIN {
    my ( $defaultconfig, $etcconfig );
    if( -e "__pkgdatadir__/predictproteinrc.default" ) { $defaultconfig = Config::IniFiles->new( -file => "__pkgdatadir__/predictproteinrc.default" ); }
    if( -e "__sysconfdir__/predictproteinrc" ) { $etcconfig = Config::IniFiles->new( -file => "__sysconfdir__/predictproteinrc", -import => $defaultconfig ); } else { $etcconfig = $defaultconfig; }
    if( ( $ENV{PREDICTPROTEINCONF} && -e "$ENV{PREDICTPROTEINCONF}" ) || -e "$ENV{HOME}/.predictproteinrc" ) { $config = Config::IniFiles->new( -file => $ENV{PREDICTPROTEINCONF} || "$ENV{HOME}/.predictproteinrc", -import => $etcconfig ); } else { $config = $etcconfig; }
    
}

# NOTE: all configuration can be overridde by command line options
$pp_rootdir  = glob($config->val('predictprotein', 'predictprotein_utildir'));
$librg_utils_perl = glob($config->val('predictprotein', 'librg_utils_perl')) || '/usr/share/librg-utils-perl';
$librg_dudek_perl = glob($config->val('predictprotein', 'librg_dudek_perl')) || '/usr/share/librg_dudek_perl';
my $db_blast_train = glob($config->val('blast', 'uniref'));
my $db_blast_final = glob($config->val('blast', 'uniref90'));
my $root_dir = $pp_rootdir || "/usr/share/predictprotein/";
my $make_file = $root_dir."/MakefilePP";
#my $main_make_file = $root_dir."/makepp.mk";  # TODO NEED TO REORGNAIZE makefiles in a way that they can call each other
my $output_format = "text";
my $temp_dir = File::Temp::tempdir( CLEANUP => 0 );

# COMMAND LINE OPTIONS
my ($help, $man, $dbg, $dry_run,$proc_name, $input_file,$output_dir, $sequence_in,$version);

if (@ARGV < 1){ die "Usage: $0 --input_file=<file>  +[OPTIONS] [process_id]\n";}

my $result = GetOptions (   "i|input_file=s" => \$input_file,
			    "o|output_dir=s" => \$output_dir,
			    "m|make_file=s" =>\$make_file,
			    "p|proc_name=s" =>\$proc_name,
			    "s|sequence=s" =>\$sequence_in,
			    "t|temp_dir=s" => \$temp_dir,
			    "n|dryrun" => \$dry_run,
			    "f|output_format=s" => \$output_format,
			    "d|debug" => \$dbg,
			    "v|version" => \$version,
			    "man" => \$man,
			    "help|?" => \$help) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
if ($version){
    print STDERR ("PredictProtein version __pkgver__\n");
    exit (0);
}

$proc_name="no_prot_name" if (! $proc_name);

system ("mkdir -p $temp_dir") if ($temp_dir);

# COLLECT USER INPUT
my $user_params;

if( -e $input_file ) { $user_params = Config::IniFiles->new( -file =>  glob($input_file) ); } else { confess ("$err Cannot open input file $input_file $!")} 
confess  ("$err Cannot read user parameter file. Exiting.")     if (!defined ($user_params));

# Get sequence
my $sequence_as_string = $sequence_in || glob($user_params->val('main', 'input')) || confess ("No input specified. Exiting");

# sequence_file holds sequence information and resides in intermediate work directory
my $sequence_file=$temp_dir."/".fileparse($input_file); 
my $seqout= Bio::SeqIO->new( -format => 'Fasta', -file => ">$sequence_file");
my $seqobj = Bio::Seq->new( -display_id => $proc_name,
			 -seq => $sequence_as_string);

$seqout->write_seq($seqobj);

# PRINT OUT JOB ENV
if ($dbg){
    cluck "temp_dir=$temp_dir";
}

# RUN MAKEFILE
my @command = ();
push (@command,"make");
push (@command, "DESTDIR=".glob($output_dir));
push (@command,"INFILE=".glob($sequence_file));
push (@command,"TEMPDIR=".glob($temp_dir)) if ($temp_dir);
push (@command,"JOBID=".$proc_name);
push (@command, "-n") if ($dry_run);
if ($make_file){
    push (@command,"-f");
    push (@command,glob($make_file));
}

print Dumper (@command) if ($dbg);
system (@command) && die( "@command failed: ".($? >> 8 ) );

# CLEAN UP PROCESS

exit(0);

__END__
=head1 predictprotein -

Protein sequence analysis suite

=head1 SYNOPSIS

predictprotein [options] [file ...]

=head1 INPUT

-input_file: parameter and input sequence

=head1 OPTIONS

=over 8

=item B<-i|input>

path to input file

=item B<-o|output_dir>

Final location of outputfiles

=item B<-d|debug>

A lot of verbiage

=item B<-n|dryrun>

Do not exectute, just shows what is about to be run. 

=item B<-help>

Print a brief help message and exits. 

=item B<-man>

This documentation page

=item B<-verbose>

Prints all debug information.

=back

=head1 DESCRIPTION

B<This program> runs a set of protein sequnce analysis methods

=head1 EXAMPLE

C<~gyachdav/Development/predictprotein/predictprotein -i ~gyachdav/Development/predictprotein/examples/tquick.in -d -o /tmp/pp/tquick.out/>

=head1 ENVIRONMENT

=over

=item PREDICTPROTEINCONF

Location of predictproteinrc configuration file to use, overriding other configuration files                               


